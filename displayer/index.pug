doctype html
html

    head
        meta(charset='utf-8')
        meta(name='viewport' content='user-scalable=no, width=device-width, initial-scale=1')
        title Message Viewer
        //- Icon link href dynamically set so can inline image in JS
        link(rel='icon')
        //- Add a light blue theme color, just to stand out from other tabs (not configurable)
        meta(name='theme-color' content='#b3e5fc')
        style
            :sass
                // BASIC STYLING
                html
                    background-color: #111111  // Don't have access to dark setting on initial load
                    @media print
                        background-color: #fff !important
                    font-family: Roboto, sans-serif
                    // Enable momentum scroll for iOS
                    -webkit-overflow-scrolling: touch

                body
                    margin: 0


                // LOADING SCREEN
                @keyframes loading
                    from
                        transform: rotate(0deg)
                    to
                        transform: rotate(360deg)

                #app > svg.loading
                    // Not reusable in other parts of app
                    position: absolute
                    top: 46%
                    left: 46%

                svg.loading
                    height: 50px
                    width: 50px
                    animation-name: loading
                    animation-duration: 2.5s  // NOTE need to adjust steps if this changes
                    // NOTE 60's quality close to linear, and ~1/2 CPU usage
                    animation-timing-function: steps(60)
                    animation-iteration-count: infinite

                svg.loading circle
                    fill: transparent
                    stroke: #2196f3


                // FAILURE
                .fail-splash
                    // Display full screen
                    position: fixed
                    top: 0
                    bottom: 0
                    left: 0
                    right: 0
                    // Cover all
                    z-index: 1000
                    // Scroll if needed (for long error messages)
                    overflow: auto
                    // Style
                    padding: 20px
                    padding-top: 100px
                    background-color: #303030
                    color: #fff

                    h1, h2
                        text-align: center
                        margin-bottom: 20px

                    &.error

                        pre
                            white-space: pre-wrap
                            margin-top: 100px  // Don't distract users from recovery button

                        .btn-wrap
                            text-align: center
                            padding: 20px

                            button
                                background-color: #fff
                                color: #000
                                border-style: none
                                border-radius: 6px
                                padding: 10px
                                cursor: pointer
                                // box-shadow copied from Vuetify to make button look pressable
                                box-shadow: 0px 2px 5px 1px rgba(0, 0, 0, 0.2)


    body
        div#app
            //- Simplified low-CPU-cost Material progress circle (proportions same)
            svg.loading(viewBox='0 0 100 100' preserveAspectRatio='xMidYMid meet')
                //- Place in middle with radius 40 (stroke length of 250 surrounds whole circle)
                circle(cx='50' cy='50' r='40' stroke-width='10' stroke-dasharray='190')

        //- WARN All scripts (even inline) must come last so that DOM ready for immediate errors
        //- Display of unsupported message (if error and not supported)
        //- This code is intentionally inline as must be simple and support ES4/5 etc
        //- WARN Should ONLY display if an error, in case feature detection is incorrect
        script.
            self._browser_supported = !! (crypto && crypto.subtle)
            self.addEventListener('error', function(){
                if (!self._browser_supported){
                    self.document.body.innerHTML += '<div class="fail-splash">'
                        + '<h1>Sorry, your browser is too old.</h1>'
                        + '<h2>Update it to view this message.</h2>'
                        + '</div>'
                }
            })


        script
            :ts

                import * as app_config from './app_config.json'
                import {error_to_string, drop} from './services/utils/exceptions'


                // ERROR HELPERS


                self._fail_report = (msg:string):void => {
                    // Report bugs by posting to stello's contact API
                    // NOTE Don't report if browser not supported, as not actionable
                    if (process.env.NODE_ENV === 'production' && self._browser_supported){
                        drop(fetch(app_config.author.post, {
                            method: 'POST',
                            body: JSON.stringify({
                                app: app_config.codename,
                                type: 'displayer-error',
                                version: app_config.version,  // So can silence old version errors
                                message: msg,
                            }),
                        }))
                    }
                }


                self._fail_splash = (heading:string, msg:string):void => {
                    // Show alert with recovery button

                    // Don't show if a fail splash already exists
                    if (self.document.querySelector('.fail-splash') !== null){
                        return
                    }

                    // Show the alert
                    self.document.body.innerHTML += `
                        <div class="fail-splash error">
                            <h1>${heading}</h1>
                            <p class='btn-wrap'>
                                <button onclick="location.reload(true)">RETRY</button>
                            </p>
                            <pre></pre>
                        </div>
                    `
                    self.document.body.querySelector('.fail-splash.error pre')!.textContent = msg
                }


                self._fail_splash_network = ():void => {
                    // Handle connection issues
                    self._fail_splash("Could not connect",
                        "Please check your internet connection and try again")
                }


                // ERROR HANDLING


                self.addEventListener('error', (event:ErrorEvent):void => {
                    // Handle uncaught errors
                    const error = event.error ?? event.message ?? 'unknown'
                    console.error(error)
                    const msg = error_to_string(error)
                    self._fail_report(msg)
                    self._fail_splash("Something went wrong", msg)
                })


                self.addEventListener('unhandledrejection', event => {
                    // Report uncaught errors in promises, but don't fail as rarely affects UI
                    self._fail_report(error_to_string(event.reason))
                })


                // INIT


                // Immediately remove hash and store internally for security
                self._hash = self.location.hash
                self.location.hash = ''


        script(src='/src/main.ts' type='module' onerror='_fail_splash_network()')
