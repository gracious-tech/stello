/* Typescript setup

 * There is one version of TS for the entire project for consistency with same rules
 * This is the base template that is extended by the node/browser templates
 * Top-level has no tsconfig but does have TS/linting in package.json since common to all
    * Everything else should be per-component to allow for flexibility when upgrading a component
 * Each component has its own tsconfig that extends a tsconfig template
    * Components may have another tsconfig in browser code dir (since different to node)
 * TS is used for type checking only, not compiling (esbuild used instead)
    * So all tsconfigs do not emit JS, they just determine the rules for each dir/file

*/

// NOTE vscode will warn about trailing commas in this file, but can ignore the warnings
{
    "compilerOptions": {
        "noEmit": true,  // Never create JS files, always bundle or pipe instead
        "resolveJsonModule": true,  // Import JSON as objects
        "moduleResolution": "Node",  // All should use node-like module resolution, not just node
        "importHelpers": true,  // Avoid duplicate utils when targeting old JS
        "esModuleInterop": true,  // Make require imports work like es6 ones do
        "experimentalDecorators": true,  // Allow @decorators
        "skipLibCheck": true,  // Mostly avoids checking node_modules (but see docs)
        "types": [],  // Disables auto-including types modules of '@types/*' (e.g. node)
        // Strict checking
        "strict": true,
        "allowUnreachableCode": false,  // Must be a mistake
        "allowUnusedLabels": false,  // Labels as in `continue *label*` for loops etc
        "exactOptionalPropertyTypes": true,  // {a:undefined} !== {}
        "noImplicitOverride": true,  // Must use `override` to make overriding parent class clear
        "noImplicitReturns": true,  // Must return a value unless void
        "noPropertyAccessFromIndexSignature": true,  // Must use `['a']` not `.a` if props unknown
        "noUncheckedIndexedAccess": true,  // If {[k:any]:type} consider `.k` = type|undefined
        "noUnusedLocals": true,  // Can't define variable and not use it
        "noUnusedParameters": false,  // It's ok to specify listener(event) and not use event
    },
}
